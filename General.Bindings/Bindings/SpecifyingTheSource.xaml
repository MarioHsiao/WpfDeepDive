<Window x:Class="Bindings.SpecifyingTheSource"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Bindings"
        Title="SpecifyingTheSource" Height="800" Width="500">
    <Window.Resources>
        <local:SomeNotifyPropertyChangedImplementingClass x:Key="theSource" NotifyingProperty="Object defined in Resource section" />
        <!-- using an element by name inside the template -->
        <Style x:Key="GettingInStyle" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Ellipse Fill="{Binding ElementName=theSource, Path=Background}" Stroke="{TemplateBinding BorderBrush}"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- providing a named element inside the template -->
        <Style x:Key="GettingOutStyle" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Ellipse x:Name="GetOutNameInStyle" Fill="Red" Stroke="{TemplateBinding BorderBrush}"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="MyButtonTemplate" TargetType="{x:Type Button}">
            <Grid>
                <!-- if you're sure it'll be used inside a button and no buttons stand inbetween you and the templated button
									then you can also use the AncestorType syntax-->
                <Ellipse Name="el1" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Background}" Width="10" Height="10">
                </Ellipse>
            </Grid>
        </ControlTemplate>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!-- a simple binding with a default source: the DataContext -->
        <TextBlock Grid.Row="0" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Text="{Binding Path=NotifyingProperty}"/>
        <!-- Getting outside the DataContext -->
        <!-- Specifying the source: using the Source property-->
        <!-- we must somehow get a reference to the source: the simplest way being instantiating it on the spot -->
        <TextBlock Grid.Row="1" HorizontalAlignment="Left" TextWrapping="Wrap"  VerticalAlignment="Top">
            <TextBlock.Text>
                <Binding Path="NotifyingProperty">
                    <Binding.Source>
                        <local:SomeNotifyPropertyChangedImplementingClass NotifyingProperty="Inline defined object" />
                    </Binding.Source>
                </Binding>
            </TextBlock.Text>
        </TextBlock>
        <!-- we must somehow get a reference to the source: their are other ways of specifying the reference, like as a resource -->
        <TextBlock Grid.Row="2" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Text="{Binding Path=NotifyingProperty, Source={StaticResource theSource}}"/>
        <!-- Specifying the source: using the RelativeSource property-->
        <!-- By specifying the source we can navigate to other objects using following relations:
            * Self: the object on which the binding is defined
            * AncestorType
            * AncestorLevel
            * Mode
            * PreviousData
            * TemplatedParent
        -->
        <!-- getting at properties of the control itself: use RelativeSource Self -->
        <TextBlock Grid.Row="3" HorizontalAlignment="Left" TextWrapping="Wrap" Text="{Binding Path=VerticalAlignment, RelativeSource={RelativeSource Self}}" VerticalAlignment="Top"/>
        <!-- above Self syntax is a kind of shortcut for following complete syntax -->
        <TextBlock Grid.Row="4" HorizontalAlignment="Left" TextWrapping="Wrap" Text="{Binding Path=VerticalAlignment, RelativeSource={RelativeSource Mode=Self}}" VerticalAlignment="Top"/>
        <!-- getting at an Ancestor by specifying its type and the level -->
        <GroupBox Grid.Row="5" Header="Demo for Ancestor binding: level 2 above the bound element">
            <StackPanel>
                <TextBlock HorizontalAlignment="Center" >Just a textblock control to have something inside the GroupBox</TextBlock>
                <GroupBox HorizontalAlignment="Right" Header="Demo for Ancestor binding: level 1b above the bound element">
                </GroupBox>
                <GroupBox HorizontalAlignment="Right" Header="Demo for Ancestor binding: level 1a above the bound element">
                    <StackPanel>
                        <TextBlock HorizontalAlignment="Right" >Just a textblock control to have something inside the GroupBox</TextBlock>
                        <TextBlock Text="{Binding Path=Header, RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}}" />
                        <TextBlock Text="{Binding Path=Header, RelativeSource={RelativeSource AncestorType={x:Type GroupBox}, AncestorLevel=2}}" />
                        <!-- AncestorLevel=0 is illegal 
                            You'll get an exception with message 
                                "Specified argument was out of the range of valid values.
                                Parameter name: AncestorLevel cannot be set to less than 1."-->
                        <!--<TextBlock Text="{Binding Path=Header, RelativeSource={RelativeSource AncestorType={x:Type GroupBox}, AncestorLevel=0}}" />-->
                        <!-- you canot get at the target itself using this syntax 
    						you'll need to use the Self syntax for that -->
                        <GroupBox HorizontalAlignment="Left"  Header="{Binding Path=HorizontalAlignment, RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}}" />
                        <GroupBox HorizontalAlignment="Left"  Header="{Binding Path=HorizontalAlignment, RelativeSource={RelativeSource Self}}" />
                    </StackPanel>
                </GroupBox>
            </StackPanel>
        </GroupBox>
        <!-- Above is shortcut for following complete specification -->
        <!--<GroupBox Grid.Row="5" Header="Demo for Ancestor binding: level 2 above the bound element">
            <StackPanel>
                <TextBlock>Just a textblock control to have something inside the GroupBox</TextBlock>
                <GroupBox Header="Demo for Ancestor binding: level 1 above the bound element">
                    <StackPanel>
                        <TextBlock>Just a textblock control to have something inside the GroupBox</TextBlock>
                        <TextBlock Text="{Binding Path=Header, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type GroupBox}}}" />
                        <TextBlock Text="{Binding Path=Header, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type GroupBox}, AncestorLevel=2}}" />
                    </StackPanel>
                </GroupBox>
            </StackPanel>
        </GroupBox>-->
        <!-- getting at the templated control-->
        <!-- you can either use a common binding with a templatedparent source -->
        <Button Grid.Row="6" Background="Red">
            <Button.Template>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Name="el1" Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" Width="10" Height="10">
                        </Ellipse>
                    </Grid>
                </ControlTemplate>
            </Button.Template>
        </Button>
        <!-- Above is shortcut for following complete specification -->
        <!--<Button Grid.Row="6" Background="Red">
            <Button.Template>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Name="el1" Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" Width="10" Height="10">
                        </Ellipse>
                    </Grid>
                </ControlTemplate>
            </Button.Template>
        </Button>-->
        <GroupBox Grid.Row="7">
			<StackPanel>
				<Button Background="Blue">
					<Button.Template>
						<ControlTemplate TargetType="{x:Type Button}">
							<Grid>
								<!-- if you're sure it'll be used inside a button and no buttons stand inbetween you and the templated button
									then you can also use the AncestorType syntax-->
								<Ellipse Name="el1" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Background}" Width="10" Height="10">
								</Ellipse>
							</Grid>
						</ControlTemplate>
					</Button.Template>
				</Button>
				<!-- Does the above also work when the templaeteis defined inside a resource ?-->
                <Button Background="Green" Template="{StaticResource MyButtonTemplate}">
                </Button>
            </StackPanel>
        </GroupBox>
        <!-- or use a TemplateBinding which acts as a kind of shortcut syntax to the above -->
        <Button Grid.Row="8" Background="Red">
            <Button.Template>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Name="el1" Fill="{TemplateBinding Property=Background}" Width="10" Height="10">
                        </Ellipse>
                    </Grid>
                </ControlTemplate>
            </Button.Template>
        </Button>
        <!-- The difference ? -->
        <!-- Following will not compile: the existance of the referenced property is checked at compile time -->
        <!--<Button Grid.Row="8" Background="Red">
            <Button.Template>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Name="el1" Fill="{TemplateBinding Property=NonExistingProperty}" Width="10" Height="10">
                        </Ellipse>
                    </Grid>
                </ControlTemplate>
            </Button.Template>
        </Button>-->
        <!-- Following will compile AND execute !!!
            However, in the Output pane in Visual Studio you will get following message:
            System.Windows.Data Error: 40 : BindingExpression path error: 'NonExistingProperty' property not found on 'object' ''Button' (Name='')'. BindingExpression:Path=NonExistingProperty; DataItem='Button' (Name=''); target element is 'Ellipse' (Name=''); target property is 'Fill' (type 'Brush')
            And of course, visually nothing will be applied
        -->
        <Button Grid.Row="9" Background="Red">
            <Button.Template>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Name="el1" Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NonExistingProperty}" Width="10" Height="10">
                        </Ellipse>
                    </Grid>
                </ControlTemplate>
            </Button.Template>
        </Button>
        <!-- Specifying the source: using the ElementName property-->
        <GroupBox x:Name="source1" Grid.Row="10" Header="Demo for ElementName property: toplevel">
            <StackPanel>
                <GroupBox x:Name="source3" Header="Out of the hierarchy">
                    <GroupBox x:Name="source31" Header="Out of the hierarchy and nested">
                        <StackPanel>
                            <TextBlock Text="Just to have something inside" />
                        </StackPanel>
                    </GroupBox>
                </GroupBox>
                <GroupBox x:Name="source2" Header="Demo for ElementName property: level 1 above the bound element">
                    <StackPanel>
                        <TextBlock Text="{Binding ElementName=source1, Path=Header}" />
                        <TextBlock Text="{Binding ElementName=source2, Path=Header}" />
                        <TextBlock Text="{Binding ElementName=source3, Path=Header}" />
                        <TextBlock Text="{Binding ElementName=source31, Path=Header}" />
                        <TextBlock Text="{Binding ElementName=source4, Path=Header}" />
                        <!-- you cannot cross window boundaries -->
                        <Button Background="{Binding ElementName=BtnInOtherWindow, Path=Background}" >Getting at a button in another window</Button>
                    </StackPanel>
                </GroupBox>
                <GroupBox x:Name="source4" Header="Declared after the referencing">
                    <StackPanel>
                        <TextBlock Text="Just to have something inside" />
                    </StackPanel>
                </GroupBox>
                <GroupBox Header="Demo for ElementName property: usage inside Template">
                    <StackPanel>
                        <TextBlock x:Name="theSource" Text="A named source for the bindings" Background="Red"></TextBlock>
                        <Button>
                            <Button.Content>
                                <TextBlock Text="{Binding ElementName=theSource, Path=Text}"></TextBlock>
                            </Button.Content>
                        </Button>
                        <!-- inline defined template -->
                        <Button>
                            <Button.Template>
                                <ControlTemplate>
                                    <TextBlock x:Name="GetOutNameInline" Background="Green" Text="{Binding ElementName=theSource, Path=Text}"></TextBlock>
                               </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <!-- template defined in resource -->
                        <Button Style="{StaticResource GettingInStyle}" >Getting in from the template</Button>
                        <!-- you cannot get at a named element in a template -->
                        <Button Background="{Binding ElementName=GetOutNameInStyle, Path=Fill}" >Getting out from a template in the resourcesection</Button>
                        <Button Background="{Binding ElementName=GetOutNameInline, Path=Fill}" >Getting out from a template defined inline</Button>
                    </StackPanel>                    
                </GroupBox>
            </StackPanel>
        </GroupBox>
    </Grid>
</Window>
